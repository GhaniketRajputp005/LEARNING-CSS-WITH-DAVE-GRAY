*{
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}
body{
    font-family: "roboto", sans-serif;
    min-height: 100vh;

    display: grid; /* grid container */
    grid-template-columns: repeat(9, 1fr);
    grid-auto-rows: 45px auto 75px;
    grid-template-areas:  /* grid template areas *//* 3 rows and 9 columns *//*we are naming the areas */
    "hd hd hd hd hd hd hd hd hd"
    "mn mn mn mn mn mn mn sb sb"
    "ft ft ft ft ft ft ft ft ft";

   column-gap: .5rem; /* gap between the column grid items */
}

.el{
    background-color: rebeccapurple;
    color: white;
    display: grid;
    place-content: center;
}

.header{
    grid-area: hd;
}

.sidebar{
    grid-area: sb;
    background-color: blue;
}

.footer{
    grid-area: ft;
}

.container{
    grid-area: mn;
    min-height: 400px;
    display: grid; /* grid container contains grid items(div in this case) */

    /* grid-auto-flow: column; makes the grid items to be placed in a row or columns */

    /* grid-template-columns: 200px 100px 200px ;
    3 columns or use one more size ,then it'll be 4 columns */
/* 
    grid-template-columns: 200px 1fr 1fr;
    1fr means 1 fraction of the remaining space */

    /* instead of explicitly providing columns, use repeat */

    /* grid-template-columns: repeat(3, 1fr ); */
    /*three columns with equal width i.e; 1fraction each */

    grid-template-columns: repeat(2, 1fr 2fr);

    grid-auto-rows: minmax(100px,auto);
    /* minmax(150px,auto) means minimum height of 150px and maximum height of auto  for rows*/

    gap: 1rem ; /* gap between the grid items */
}


.box{
    background-color: #000;
    color: white;
    font-size: 3 rem;
    padding: .5rem;
}


/* 
order: 1; order of the grid items */

.box:first-child{
    background-color: #f00;

    /* grid-column-start: 1;  from line 1 starts from extreme left
    /* grid-column-end: 4; endds at  line 4   */
    /* span 3 columns */

    /* When pairing grid-column-start and grid-column-end, you might assume that the end value has to be greater than the start value. But this turns out not the case! */

    /* Instead of defining a grid item based on the start and end positions of the grid lines, you can define it based on your desired column width using the span keyword. Keep in mind that span only works with positive values.

    For example, water these carrots with the rule grid-column-end: span 2, icludes starting grid   ;. */

    /* grid-row-start: 1;
    grid-row-end: 3; */
    /* span 2 rows */



    grid-column: 1 / 4;
    grid-row:1 / 3;
    /*shorthand- span 3 columns and 2 rows */
    /* grid-column: 1 / 4;: This sets the item to start at the first column line and end at the fourth column line. In other words, it spans across three columns (columns 1, 2, and 3). The item starts at the leftmost boundary of the grid and ends just before the fourth column.

    grid-row: 1 / 3;: This sets the item to start at the first row line and end at the third row line. It spans across two rows (rows 1 and 2). The item starts at the topmost boundary of the grid and ends just before the third row. */

    display: grid; /*nested grid container , grid item being grid container */
    align-content: center;
    justify-content: center;

    place-content: center; /*shorthand for align-content and justify-content */
}

.box:nth-child(2){
    background-color: purple;
    grid-column: 1 / 5;
    grid-row: 3 / 4;


}